%description:

In this test, packets are produced periodically (randomly) by an active packet
source (ActivePacketSource). The packets are collected periodically (randomly) by
an active packet sink (ActivePacketSink). The source and the sink is connected
by a compound priority queue (TestQueue) where packets are stored temporarily.
This queue contains a classifier (PacketClassifier), two queues (PacketQueues),
and a priorty scheduler (PriortyScheduler).

%file: test.ned

import inet.queueing.classifier.PacketClassifier;
import inet.queueing.queue.CompoundPacketQueueBase;
import inet.queueing.queue.PacketQueue;
import inet.queueing.sink.ActivePacketSink;
import inet.queueing.source.ActivePacketSource;
import inet.queueing.scheduler.PriorityScheduler;

module TestCompoundPacketQueue extends CompoundPacketQueueBase
{
    parameters:
        @class(::inet::queueing::CompoundPacketQueueBase);
    submodules:
        classifier: PacketClassifier {
            @display("p=100,100");
        }
        queue1: PacketQueue {
            @display("p=200,100");
        }
        queue2: PacketQueue {
            @display("p=200,200");
        }
        scheduler: PriorityScheduler {
            @display("p=300,100");
        }
    connections:
        in --> classifier.in;
    	classifier.out++ --> queue1.in;
    	classifier.out++ --> queue2.in;
    	queue1.out --> scheduler.in++;
    	queue2.out --> scheduler.in++;
    	scheduler.out --> out;
}

network TestCompoundPacketQueueNetwork
{
    submodules:
        producer: ActivePacketSource {
            @display("p=100,100");
        }
        queue: TestCompoundPacketQueue {
            @display("p=200,100");
        }
        collector: ActivePacketSink {
            @display("p=300,100");
        }
    connections allowunconnected:
        producer.out --> queue.in;
        queue.out --> collector.in;
}

%file: Test.cc
#include <vector>
#include "inet/queueing/function/PacketClassifierFunction.h"
#include "inet/common/packet/Packet.h"

using namespace inet; 

static int testClassify(Packet *packet)
{
    return packet->getId() % 2;
}

Register_Packet_Classifier_Function(TestClassifier, testClassify);

%inifile: omnetpp.ini

[General]
network = TestCompoundPacketQueueNetwork
sim-time-limit = 10s
cmdenv-event-banners = false
cmdenv-log-prefix = "At %ts %N: "
*.producer.packetLength = 1B
*.producer.productionInterval = uniform(0s, 2s)
*.collector.collectionInterval = uniform(0s, 2s)
*.queue.classifier.classifierClass = "TestClassifier"

%# remove formatting
%subst: /\x1B\[[0-9;]*m//

%subst: /\nRunning simulation\.\.\.\n//

%contains-regex: stdout
At [^\n]*?: Producing packet, .*?producer-0.*?
At [^\n]*?: Classifying packet, .*?producer-0.*?
At [^\n]*?: Pushing packet, .*?producer-0.*?
At [^\n]*?: Pulling packet, .*?producer-0.*?
At [^\n]*?: Scheduling packet, .*?producer-0.*?
At [^\n]*?: Collecting packet, .*?producer-0.*?
At [^\n]*?: Producing packet, .*?producer-1.*?
At [^\n]*?: Classifying packet, .*?producer-1.*?
At [^\n]*?: Pushing packet, .*?producer-1.*?
At [^\n]*?: Pulling packet, .*?producer-1.*?
At [^\n]*?: Scheduling packet, .*?producer-1.*?
At [^\n]*?: Collecting packet, .*?producer-1.*?
At [^\n]*?: Producing packet, .*?producer-2.*?
At [^\n]*?: Classifying packet, .*?producer-2.*?
At [^\n]*?: Pushing packet, .*?producer-2.*?
At [^\n]*?: Pulling packet, .*?producer-2.*?
At [^\n]*?: Scheduling packet, .*?producer-2.*?
At [^\n]*?: Collecting packet, .*?producer-2.*?
At [^\n]*?: Producing packet, .*?producer-3.*?
At [^\n]*?: Classifying packet, .*?producer-3.*?
At [^\n]*?: Pushing packet, .*?producer-3.*?
At [^\n]*?: Pulling packet, .*?producer-3.*?
At [^\n]*?: Scheduling packet, .*?producer-3.*?
At [^\n]*?: Collecting packet, .*?producer-3.*?
At [^\n]*?: Producing packet, .*?producer-4.*?
At [^\n]*?: Classifying packet, .*?producer-4.*?
At [^\n]*?: Pushing packet, .*?producer-4.*?
At [^\n]*?: Producing packet, .*?producer-5.*?
At [^\n]*?: Classifying packet, .*?producer-5.*?
At [^\n]*?: Pushing packet, .*?producer-5.*?
At [^\n]*?: Pulling packet, .*?producer-4.*?
At [^\n]*?: Scheduling packet, .*?producer-4.*?
At [^\n]*?: Collecting packet, .*?producer-4.*?
At [^\n]*?: Producing packet, .*?producer-6.*?
At [^\n]*?: Classifying packet, .*?producer-6.*?
At [^\n]*?: Pushing packet, .*?producer-6.*?
At [^\n]*?: Pulling packet, .*?producer-6.*?
At [^\n]*?: Scheduling packet, .*?producer-6.*?
At [^\n]*?: Collecting packet, .*?producer-6.*?
At [^\n]*?: Producing packet, .*?producer-7.*?
At [^\n]*?: Classifying packet, .*?producer-7.*?
At [^\n]*?: Pushing packet, .*?producer-7.*?
At [^\n]*?: Producing packet, .*?producer-8.*?
At [^\n]*?: Classifying packet, .*?producer-8.*?
At [^\n]*?: Pushing packet, .*?producer-8.*?
At [^\n]*?: Pulling packet, .*?producer-8.*?
At [^\n]*?: Scheduling packet, .*?producer-8.*?
At [^\n]*?: Collecting packet, .*?producer-8.*?
At [^\n]*?: Pulling packet, .*?producer-5.*?
At [^\n]*?: Scheduling packet, .*?producer-5.*?
At [^\n]*?: Collecting packet, .*?producer-5.*?
