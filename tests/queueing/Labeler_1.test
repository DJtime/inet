%description:

In this test, packets are produced periodically by an active packet source
(ActivePacketSource). The packets are consumed by two passive packet sinks
(PassivePacketSinks). The single source is connected to the two sinks using a
classifier (LabelClassifier). The classifier forwards packets alternately to
one or the other sink based on the packet's label. The label is attached by
a PacketLabeler based on the packet length.

%file: test.ned

import inet.queueing.sink.PassivePacketSink;
import inet.queueing.marker.PacketLabeler;
import inet.queueing.classifier.LabelClassifier;
import inet.queueing.source.ActivePacketSource;

network TestLabeler
{
    submodules:
        producer: ActivePacketSource {
            @display("p=100,100");
        }
        marker: PacketLabeler {
            @display("p=200,100");
        }
        classifier: LabelClassifier {
            @display("p=300,100");
        }
        consumer1: PassivePacketSink {
            @display("p=400,100");
        }
        consumer2: PassivePacketSink {
            @display("p=400,200");
        }
    connections allowunconnected:
        producer.out --> marker.in;
        marker.out --> classifier.in;
        classifier.out++ --> consumer1.in;
        classifier.out++ --> consumer2.in;
}

%file: Test.cc
#include "inet/queueing/function/PacketFilterFunction.h"
#include "inet/common/packet/Packet.h"

using namespace inet; 

static bool testSmall(const Packet *packet)
{
    return packet->getTotalLength() == B(1);
}

Register_Packet_Filter_Function(TestSmall, testSmall);

static bool testLarge(const Packet *packet)
{
    return packet->getTotalLength() == B(2);
}

Register_Packet_Filter_Function(TestLarge, testLarge);

%inifile: omnetpp.ini

[General]
network = TestLabeler
sim-time-limit = 10s
cmdenv-event-banners = false
cmdenv-log-prefix = "At %ts %N: "
*.producer.packetLength = intuniform(1B, 2B)
*.producer.productionInterval = 1s
*.marker.filterClasses = "TestSmall TestLarge"
*.marker.labels = "small large"
*.classifier.labelsToGateIndices = "small 0 large 1"

%# remove formatting
%subst: /\x1B\[[0-9;]*m//

%subst: /\nRunning simulation\.\.\.\n//

%contains-regex: stdout
At 0s producer: Producing packet, [^\n]*?producer-0[^\n]*?
At 0s marker: Marking packet, [^\n]*?producer-0[^\n]*?
At 0s marker: Marking packet, [^\n]*?producer-0[^\n]*?
At 0s classifier: Classifying packet, [^\n]*?producer-0[^\n]*?
At 0s consumer1: Consuming packet, [^\n]*?producer-0[^\n]*?
At 1s producer: Producing packet, [^\n]*?producer-1[^\n]*?
At 1s marker: Marking packet, [^\n]*?producer-1[^\n]*?
At 1s marker: Marking packet, [^\n]*?producer-1[^\n]*?
At 1s classifier: Classifying packet, [^\n]*?producer-1[^\n]*?
At 1s consumer2: Consuming packet, [^\n]*?producer-1[^\n]*?
At 2s producer: Producing packet, [^\n]*?producer-2[^\n]*?
At 2s marker: Marking packet, [^\n]*?producer-2[^\n]*?
At 2s marker: Marking packet, [^\n]*?producer-2[^\n]*?
At 2s classifier: Classifying packet, [^\n]*?producer-2[^\n]*?
At 2s consumer2: Consuming packet, [^\n]*?producer-2[^\n]*?
At 3s producer: Producing packet, [^\n]*?producer-3[^\n]*?
At 3s marker: Marking packet, [^\n]*?producer-3[^\n]*?
At 3s marker: Marking packet, [^\n]*?producer-3[^\n]*?
At 3s classifier: Classifying packet, [^\n]*?producer-3[^\n]*?
At 3s consumer1: Consuming packet, [^\n]*?producer-3[^\n]*?
At 4s producer: Producing packet, [^\n]*?producer-4[^\n]*?
At 4s marker: Marking packet, [^\n]*?producer-4[^\n]*?
At 4s marker: Marking packet, [^\n]*?producer-4[^\n]*?
At 4s classifier: Classifying packet, [^\n]*?producer-4[^\n]*?
At 4s consumer2: Consuming packet, [^\n]*?producer-4[^\n]*?
At 5s producer: Producing packet, [^\n]*?producer-5[^\n]*?
At 5s marker: Marking packet, [^\n]*?producer-5[^\n]*?
At 5s marker: Marking packet, [^\n]*?producer-5[^\n]*?
At 5s classifier: Classifying packet, [^\n]*?producer-5[^\n]*?
At 5s consumer2: Consuming packet, [^\n]*?producer-5[^\n]*?
At 6s producer: Producing packet, [^\n]*?producer-6[^\n]*?
At 6s marker: Marking packet, [^\n]*?producer-6[^\n]*?
At 6s marker: Marking packet, [^\n]*?producer-6[^\n]*?
At 6s classifier: Classifying packet, [^\n]*?producer-6[^\n]*?
At 6s consumer2: Consuming packet, [^\n]*?producer-6[^\n]*?
At 7s producer: Producing packet, [^\n]*?producer-7[^\n]*?
At 7s marker: Marking packet, [^\n]*?producer-7[^\n]*?
At 7s marker: Marking packet, [^\n]*?producer-7[^\n]*?
At 7s classifier: Classifying packet, [^\n]*?producer-7[^\n]*?
At 7s consumer2: Consuming packet, [^\n]*?producer-7[^\n]*?
At 8s producer: Producing packet, [^\n]*?producer-8[^\n]*?
At 8s marker: Marking packet, [^\n]*?producer-8[^\n]*?
At 8s marker: Marking packet, [^\n]*?producer-8[^\n]*?
At 8s classifier: Classifying packet, [^\n]*?producer-8[^\n]*?
At 8s consumer2: Consuming packet, [^\n]*?producer-8[^\n]*?
At 9s producer: Producing packet, [^\n]*?producer-9[^\n]*?
At 9s marker: Marking packet, [^\n]*?producer-9[^\n]*?
At 9s marker: Marking packet, [^\n]*?producer-9[^\n]*?
At 9s classifier: Classifying packet, [^\n]*?producer-9[^\n]*?
At 9s consumer2: Consuming packet, [^\n]*?producer-9[^\n]*?
At 10s producer: Producing packet, [^\n]*?producer-10[^\n]*?
At 10s marker: Marking packet, [^\n]*?producer-10[^\n]*?
At 10s marker: Marking packet, [^\n]*?producer-10[^\n]*?
At 10s classifier: Classifying packet, [^\n]*?producer-10[^\n]*?
At 10s consumer2: Consuming packet, [^\n]*?producer-10[^\n]*?

<!> Simulation time limit reached -- at t=10s
