%description:

In this test, packets are produced periodically by an active packet source
(ActivePacketSource). The packets are consumed by a passive packet sink (PassivePacketSink).
Packets are passed through from the source to the sink by a filter (PacketFilter).
Every second packet is dropped.

%file: test.ned

import inet.queueing.sink.PassivePacketSink;
import inet.queueing.filter.PacketFilter;
import inet.queueing.source.ActivePacketSource;

network TestFilter
{
    submodules:
        producer: ActivePacketSource {
            @display("p=100,100");
        }
        filter: PacketFilter {
            @display("p=200,100");
        }
        consumer: PassivePacketSink {
            @display("p=300,100");
        }
    connections allowunconnected:
        producer.out --> filter.in;
        filter.out --> consumer.in;
}

%file: Test.cc
#include "inet/queueing/function/PacketFilterFunction.h"
#include "inet/common/packet/Packet.h"

using namespace inet; 

static bool testFilter(const Packet *packet)
{
    return packet->getId() % 2 == 0;
}

Register_Packet_Filter_Function(@TESTNAME@TestFilter, testFilter);

%inifile: omnetpp.ini

[General]
network = TestFilter
sim-time-limit = 10s
cmdenv-event-banners = false
cmdenv-log-prefix = "At %ts %N: "
*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.filter.filterClass = "@TESTNAME@TestFilter"

%# remove formatting
%subst: /\x1B\[[0-9;]*m//

%subst: /\nRunning simulation\.\.\.\n//

%contains-regex: stdout
At 0s producer: Producing packet, [^\n]*?producer-0[^\n]*?
At 0s filter: Passing through packet, [^\n]*?producer-0[^\n]*?
At 0s consumer: Consuming packet, [^\n]*?producer-0[^\n]*?
At 1s producer: Producing packet, [^\n]*?producer-1[^\n]*?
At 1s filter: Filtering out packet, [^\n]*?producer-1[^\n]*?
At 2s producer: Producing packet, [^\n]*?producer-2[^\n]*?
At 2s filter: Passing through packet, [^\n]*?producer-2[^\n]*?
At 2s consumer: Consuming packet, [^\n]*?producer-2[^\n]*?
At 3s producer: Producing packet, [^\n]*?producer-3[^\n]*?
At 3s filter: Filtering out packet, [^\n]*?producer-3[^\n]*?
At 4s producer: Producing packet, [^\n]*?producer-4[^\n]*?
At 4s filter: Passing through packet, [^\n]*?producer-4[^\n]*?
At 4s consumer: Consuming packet, [^\n]*?producer-4[^\n]*?
At 5s producer: Producing packet, [^\n]*?producer-5[^\n]*?
At 5s filter: Filtering out packet, [^\n]*?producer-5[^\n]*?
At 6s producer: Producing packet, [^\n]*?producer-6[^\n]*?
At 6s filter: Passing through packet, [^\n]*?producer-6[^\n]*?
At 6s consumer: Consuming packet, [^\n]*?producer-6[^\n]*?
At 7s producer: Producing packet, [^\n]*?producer-7[^\n]*?
At 7s filter: Filtering out packet, [^\n]*?producer-7[^\n]*?
At 8s producer: Producing packet, [^\n]*?producer-8[^\n]*?
At 8s filter: Passing through packet, [^\n]*?producer-8[^\n]*?
At 8s consumer: Consuming packet, [^\n]*?producer-8[^\n]*?
At 9s producer: Producing packet, [^\n]*?producer-9[^\n]*?
At 9s filter: Filtering out packet, [^\n]*?producer-9[^\n]*?
At 10s producer: Producing packet, [^\n]*?producer-10[^\n]*?
At 10s filter: Passing through packet, [^\n]*?producer-10[^\n]*?
At 10s consumer: Consuming packet, [^\n]*?producer-10[^\n]*?
