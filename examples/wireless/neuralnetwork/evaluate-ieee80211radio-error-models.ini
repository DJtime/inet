[General]
network = EvaluateIeee80211RadioErrorModels
sim-time-limit = 100s
result-dir = "results/EvaluateIeee80211RadioErrorModels/${configname}/"
output-scalar-file = "${resultdir}/repetition=${repetition}.sca"
cmdenv-output-file = "${resultdir}/repetition=${repetition}.out"
repeat = 1
num-rngs = 2
config-recording = essentials
**Neural**.cmdenv-log-level = trace
#debug-on-errors=true
#debugger-attach-on-error=true

**.param-recording = false
**.vector-recording = false
**.bin-recording = false
**.scalar-recording = false

**.errorModel.rng-0 = 1

**.symbolCorruptionMode = "1bit"

*.numHosts = 2
**.crcMode = "computed"
**.fcsMode = "computed"

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m

# wlan
**.centerFrequency = 2.442GHz # TODO: should not be here
**.channel = 6
**.channelNumber = 6
*.radio.bandwidth = 20MHz # TODO: should not be here
*.radio.transmitter.power = 52 * 312.5kW + 500kW # so the power density is 1 WpHz
*.radio.receiver.sensitivity = -109dBm
*.radio.receiver.energyDetection = -90dBm
*.radio.receiver.snirThreshold = -inf dB
*.radio.receiver.channelSpacing = 20MHz


**.transmitter.frequencyGains = "left   c-12.5MHz -45dB \
                          linear c-11.1MHz  -36dB \
                          linear c-10.2MHz   -24dB \
                          linear c-8.6MHz     -15dB \
                          linear c-8.3MHz        0dB \
                          linear c-0.15MHz       0dB \
                          linear c-0.1MHz      -11dB \
                          linear c            -14dB \
                          linear c+0.1MHz      -11dB \
                          linear c+0.15MHz       0dB \
                          linear c+8.3MHz        0dB \
                          linear c+8.6MHz     -15dB \
                          linear c+10.2MHz   -24dB \
                          linear c+11.1MHz  -36dB \
                          linear c+12.5MHz -45dB \
                          right"


#*.radio.transmitter.frequencyGainsNormalization = "maximum"


**.repeatCount = 100

# transmitter
*.radio.transmitter.bitrate = 6Mbps
*.radio.transmitter.power = 10mW
*.radio.transmitter.levelOfDetail = "symbol"
*.radio.transmitter.encoder.fecEncoder.typename = "ConvolutionalCoder"
*.radio.transmitter.encoder.fecEncoder.transferFunctionMatrix = "1 3"
*.radio.transmitter.encoder.fecEncoder.constraintLengthVector = "2"
*.radio.transmitter.encoder.fecEncoder.puncturingMatrix = "1; 1"
*.radio.transmitter.encoder.fecEncoder.punctureK = 1
*.radio.transmitter.encoder.fecEncoder.punctureN = 2

# receiver
*.radio.receiver.levelOfDetail = "symbol"
*.radio.receiver.decoder.fecDecoder.typename = "ConvolutionalCoder"
*.radio.receiver.decoder.fecDecoder.transferFunctionMatrix = "1 3"
*.radio.receiver.decoder.fecDecoder.constraintLengthVector = "2"
*.radio.receiver.decoder.fecDecoder.puncturingMatrix = "1; 1"
*.radio.receiver.decoder.fecDecoder.punctureK = 1
*.radio.receiver.decoder.fecDecoder.punctureN = 2





**.snirsFilename = "snirs_sanity.csv"

# mobility
*.radio.antenna.mobility.typename = "StationaryMobility"
*.radio.antenna.mobility.initialX = 0m
*.radio.antenna.mobility.initialY = 0m
*.radio.antenna.mobility.initialZ = 0m
*.radio.antenna.mobilityModule = "mobility"

[Config DimensionalSymbollevel]
description = "symbol level simulation using dimensional analog model"

**.persFilename = "pers_s.csv"

**.radioMedium.typename = "Ieee80211LayeredDimensionalRadioMedium"
**.radio.typename = "Ieee80211OfdmRadio"

# transmitter
**.radio.transmitter.typename = "Ieee80211LayeredOfdmTransmitter"
**.radio.transmitter.levelOfDetail = "symbol"

# receiver
**.radio.receiver.typename = "Ieee80211LayeredOfdmReceiver"
**.radio.receiver.levelOfDetail = "symbol"
**.radio.receiver.errorModel.typename = "Ieee80211OfdmErrorModel"

# needed because the transmitter also has an error model...?
**.neuralNetworkModelFilenames = []


[Config DimensionalPacketlevel]
description = "packet level simulation using dimensional analog model"

**.persFilename = "pers_p.csv"

*.radioMedium.typename = "Ieee80211DimensionalRadioMedium"
*.radio.typename = "Ieee80211DimensionalRadio"

**.snirMode = "min"

# needed because the transmitter also has an error model...?
**.neuralNetworkModelFilenames = []

[Config DimensionalPacketlevelNeuralNetwork]
description = "packet level simulation using scalar analog model with neural network based error model"
extends = DimensionalPacketlevel

**.persFilename = "pers_n.csv"

*.radio.receiver.errorModel.typename = "NeuralNetworkErrorModel"
**.modelNameFormat = "models/Ieee80211OfdmRadio_%r.json"

**.neuralNetworkModelFilenames = [
                 "models/Ieee80211OfdmRadio_6Mbps.json"
    ]
#**.neuralNetworkModelFilenames = [
#                "models/Ieee80211OfdmRadio_6Mbps.json",
#                "models/Ieee80211OfdmRadio_9Mbps.json",
#                "models/Ieee80211OfdmRadio_12Mbps.json",
#                "models/Ieee80211OfdmRadio_18Mbps.json",
#                "models/Ieee80211OfdmRadio_24Mbps.json",
#                "models/Ieee80211OfdmRadio_36Mbps.json",
#                "models/Ieee80211OfdmRadio_48Mbps.json",
#                "models/Ieee80211OfdmRadio_54Mbps.json"
#            ]
